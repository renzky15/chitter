[{"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/index.js":"1","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/App.js":"2","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/Tweet.js":"3","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/store/store.js":"4","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/TweetForm/TweetForm.js":"5","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/action/tweet.js":"6","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/TweetList/TweetList.js":"7","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/reducers/TweetReducer.js":"8","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/Login/Login.js":"9","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/api/auth.js":"10","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/Register/Register.js":"11","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/util/AuthContext.js":"12","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/Router.js":"13","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/LogoutBtn/LogoutBtn.js":"14","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/api/tweet.js":"15","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/Navbar/Navbar.js":"16","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/TweetList/CommentForm.js":"17"},{"size":224,"mtime":1612754213024,"results":"18","hashOfConfig":"19"},{"size":489,"mtime":1614057991187,"results":"20","hashOfConfig":"19"},{"size":1125,"mtime":1614268328501,"results":"21","hashOfConfig":"19"},{"size":454,"mtime":1614146205276,"results":"22","hashOfConfig":"19"},{"size":1822,"mtime":1614844282544,"results":"23","hashOfConfig":"19"},{"size":2233,"mtime":1614789467721,"results":"24","hashOfConfig":"19"},{"size":10249,"mtime":1616739427047,"results":"25","hashOfConfig":"19"},{"size":872,"mtime":1614790138326,"results":"26","hashOfConfig":"19"},{"size":2011,"mtime":1614151509526,"results":"27","hashOfConfig":"19"},{"size":936,"mtime":1620199777535,"results":"28","hashOfConfig":"19"},{"size":3244,"mtime":1614059968720,"results":"29","hashOfConfig":"19"},{"size":804,"mtime":1620199353453,"results":"30","hashOfConfig":"19"},{"size":1024,"mtime":1614564003828,"results":"31","hashOfConfig":"19"},{"size":581,"mtime":1614269067437,"results":"32","hashOfConfig":"19"},{"size":925,"mtime":1620205931331,"results":"33","hashOfConfig":"19"},{"size":903,"mtime":1614269672264,"results":"34","hashOfConfig":"19"},{"size":976,"mtime":1616742757420,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"dm34m4",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/index.js",[],["79","80"],"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/App.js",[],"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/Tweet.js",["81","82"],"import React, { useState, useEffect, useContext } from \"react\"\nimport { connect } from \"react-redux\"\nimport TweetForm from \"./TweetForm/TweetForm\"\nimport { tweetActions } from \"../action/tweet\"\nimport TweetList from \"./TweetList/TweetList\"\n\nimport AuthContext from \"../util/AuthContext\"\n\nfunction Tweet(props) {\n    // props.dispatch(\n    //     addTweet({\n    //         name: \"Test\",\n    //         comments: 12,\n    //         retweets: 23,\n    //         likses: 23,\n    //     })\n    // )\n\n    useEffect(() => {\n        props.dispatch(tweetActions.getAllTweet())\n    }, [])\n\n    const { currentUser } = useContext(AuthContext)\n\n    console.log(currentUser)\n\n    return (\n        <div className=\"container\">\n            <TweetForm\n                onTweetPost={(tweetPost) => {\n                    props.dispatch(tweetActions.addTweet(tweetPost))\n                }}\n            />\n\n            {props.tweet_payload.length > 0 ? <TweetList /> : <div></div>}\n        </div>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        tweet_payload: state.tweets,\n    }\n}\nexport default connect(mapStateToProps)(Tweet)\n","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/store/store.js",["83"],"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\"\nimport TweetReducer from \"../reducers/TweetReducer\"\nimport thunk from \"redux-thunk\"\n\nexport default () => {\n    const composeEnhancer =\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n    const store = createStore(\n        combineReducers({\n            tweets: TweetReducer,\n        }),\n        composeEnhancer(applyMiddleware(thunk))\n    )\n    return store\n}\n","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/TweetForm/TweetForm.js",[],"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/action/tweet.js",["84"],"import { Tweet, allTweet, likeCounter, remove } from \"../api/tweet\"\n\nconst today = new Date()\n// export const addTweet = ({\n//     user_id = '',\n//     username = \"\",\n//     tweetBody = \"\",\n//     tweeted_date = today.toDateString(),\n//     comments = 0,\n//     retweets = 0,\n//     likes = 0,\n// } = {}) => ({\n//     type: \"ADD_TWEET\",\n//     tweet_payload: {\n//         user_id,\n//         username,\n//         tweetBody,\n//         tweeted_date,\n//         comments,\n//         retweets,\n//         likes,\n//     },\n// })\n\nexport const tweetActions = {\n    addTweet,\n    getAllTweet,\n    likeTweet,\n    removeTweet,\n}\nfunction addTweet(tweet_payload) {\n    return async (dispatch) => {\n        await Tweet(tweet_payload).then(\n            (res) => {\n                dispatch(success(res.data))\n            },\n            (error) => {\n                console.log(error.message)\n            }\n        )\n    }\n\n    function success(tweet_payload) {\n        return { type: \"ADD_TWEET\", tweet_payload }\n    }\n}\n\nfunction getAllTweet(page) {\n    return async (dispatch) => {\n        await allTweet(page).then(\n            (res) => {\n                dispatch(success(res.data))\n                // console.log(res)\n            },\n            (error) => {\n                console.log(error.message)\n            }\n        )\n    }\n\n    function success(tweets_payload) {\n        return { type: \"ALL_TWEET\", tweets_payload }\n    }\n}\n\nfunction likeTweet(payload) {\n    return async (dispatch) => {\n        await likeCounter(payload).then(\n            (res) => {\n                dispatch(success(res.data))\n                // console.log(res)\n            },\n            (error) => {\n                console.log(error.message)\n            }\n        )\n    }\n\n    function success(tweets_payload) {\n        return { type: \"LIKE_TWEET\", tweets_payload }\n    }\n}\n\nfunction removeTweet(payload) {\n    return async (dispatch) => {\n        await remove(payload).then(\n            (res) => {\n                dispatch(success(res.data))\n            },\n            (error) => {\n                console.log(error.message)\n            }\n        )\n    }\n\n    function success(tweets_payload) {\n        return { type: \"REMOVE_TWEET\", tweets_payload }\n    }\n}\n","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/TweetList/TweetList.js",["85"],"import React, { useState, useEffect, useContext } from \"react\"\nimport \"./TweetList.css\"\nimport { connect } from \"react-redux\"\nimport moment from \"moment\"\nimport { tweetActions } from \"../../action/tweet\"\nimport AuthContext from \"../../util/AuthContext\"\nimport InfiniteScroll from \"react-infinite-scroll-component\"\nimport CommentForm from \"./CommentForm\"\n\nfunction TweetList(props) {\n    const [tweetList, setTweetList] = useState([])\n    const [likeCounter, setLikeCounter] = useState()\n    const [page, setPage] = useState(1)\n    const { currentUser } = useContext(AuthContext)\n    const [showCommentForm, setShowCommentForm] = useState(false)\n    const [commentId, setCommentId] = useState()\n    useEffect(() => {\n        const onLoadTweetList = () => {\n            setTweetList(props.tweet_payload)\n        }\n        onLoadTweetList()\n    }, [props.tweet_payload])\n\n    const handleLikeCounter = (tweet_id) => {\n        const data = tweetList.filter((list) => list._id === tweet_id)\n        setLikeCounter(data[0].likes + 1)\n        const payload = {\n            likes: likeCounter,\n            _id: tweet_id,\n        }\n        props.dispatch(tweetActions.likeTweet(payload))\n    }\n\n    const handleRemoveTweet = (id) => {\n        try {\n            props.dispatch(tweetActions.removeTweet(id))\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const handleComment = (id) => {\n        setShowCommentForm(!showCommentForm)\n        setCommentId(id)\n    }\n\n    const fetchMoreData = () => {\n        console.log(props.dispatch(tweetActions.getAllTweet(page)))\n        setTweetList(props.tweet_payload)\n        setPage((prev) => prev + 1)\n    }\n    useEffect(() => {\n        fetchMoreData()\n    }, [])\n    return (\n        <div className=\"container\">\n            <ul>\n                <div id=\"scrollable\">\n                    <InfiniteScroll\n                        dataLength={tweetList.length}\n                        next={fetchMoreData}\n                        hasMore={true}\n                        loader={<h4>Loading...</h4>}\n                        scrollableTarget=\"scrollable\"\n                    >\n                        {tweetList\n                            .map((tweet, index) => (\n                                <div>\n                                    <div className=\"tweet-list-container\">\n                                        <li key={index}>\n                                            <div className=\"li-element\">\n                                                <div className=\"username-icon\">\n                                                    <span></span>\n                                                </div>\n\n                                                <div className=\"tweet-body\">\n                                                    <div className=\"tweet-body-header\">\n                                                        <div className=\"tweet-username\">\n                                                            <span>\n                                                                {tweet.username}\n                                                            </span>\n                                                        </div>\n                                                        <div className=\"date-actions-wrapper\">\n                                                            <div className=\"tweet-date-created\">\n                                                                <span>\n                                                                    {moment(\n                                                                        tweet.date_tweeted\n                                                                    ).fromNow()}\n                                                                </span>\n                                                            </div>\n                                                            {currentUser._id ===\n                                                            tweet.user_id ? (\n                                                                <div className=\"remove-tweet-btn\">\n                                                                    <button\n                                                                        onClick={() =>\n                                                                            handleRemoveTweet(\n                                                                                tweet._id\n                                                                            )\n                                                                        }\n                                                                        className=\"remove-btn\"\n                                                                    >\n                                                                        <span className=\"remove-btn-text\">\n                                                                            x\n                                                                        </span>\n                                                                    </button>\n                                                                </div>\n                                                            ) : (\n                                                                \"\"\n                                                            )}\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"tweet-body-text\">\n                                                        <p>\n                                                            {tweet.tweet_body}\n                                                        </p>\n                                                    </div>\n                                                    <div className=\"like-comments-counter\">\n                                                        <div className=\"number-of-likes\">\n                                                            <span>\n                                                                {tweet.likes}{\" \"}\n                                                                like(s)\n                                                            </span>\n                                                        </div>\n                                                        <div className=\"number-of-comments\">\n                                                            <span>\n                                                                {\n                                                                    tweet\n                                                                        .comments\n                                                                        .length\n                                                                }{\" \"}\n                                                                comments\n                                                            </span>\n                                                        </div>\n                                                    </div>\n\n                                                    <hr id=\"line-separator\" />\n                                                    <div className=\"tweet-body-footer\">\n                                                        <div className=\"tweet-like-btn\">\n                                                            <button\n                                                                onClick={() =>\n                                                                    handleLikeCounter(\n                                                                        tweet._id\n                                                                    )\n                                                                }\n                                                            >\n                                                                <span id=\"btn-like\">\n                                                                    Like\n                                                                </span>\n                                                            </button>\n                                                        </div>\n                                                        <div className=\"tweet-comment-btn\">\n                                                            <button\n                                                                onClick={() =>\n                                                                    handleComment(\n                                                                        tweet._id\n                                                                    )\n                                                                }\n                                                            >\n                                                                Comment\n                                                            </button>\n                                                        </div>\n                                                        <div className=\"tweet-retweet-btn\">\n                                                            <span>Retweet</span>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                    </div>\n                                    {commentId === tweet._id ? (\n                                        <CommentForm id={commentId} />\n                                    ) : (\n                                        <div></div>\n                                    )}\n                                </div>\n                            ))\n                            .reverse()}\n                    </InfiniteScroll>\n                </div>\n            </ul>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tweet_payload: state.tweets,\n    }\n}\nexport default connect(mapStateToProps)(TweetList)\n","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/reducers/TweetReducer.js",["86"],"const tweetReducerDefaultState = []\n\nexport default (state = tweetReducerDefaultState, action) => {\n    switch (action.type) {\n        case \"ADD_TWEET\":\n            return [...state, action.tweet_payload]\n        case \"ALL_TWEET\":\n            return [...action.tweets_payload]\n        case \"REMOVE_TWEET\":\n            return [...action.tweets_payload]\n        case \"LIKE_TWEET\":\n            return [...action.tweets_payload]\n\n        // case \"LIKE_TWEET\":\n        //     return state.map((tweet_payload) => {\n        //         if (task_payload.id === action.id) {\n        //             return {\n        //                 ...task_payload,\n        //                 ...action.updates,\n        //             }\n        //         } else {\n        //             return task_payload\n        //         }\n        //     })\n        default:\n            return state\n    }\n}\n","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/Login/Login.js",[],"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/api/auth.js",["87"],"import axios from \"axios\"\nconst api = \"http://localhost:8000/api\"\nconst config = {\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"*\",\n}\nexport async function login(payload) {\n    try {\n        const res = await axios.post(`/auth/login`, payload, config)\n\n        return res.data\n    } catch (error) {\n        console.log(\"Error.\")\n    }\n}\n\nexport async function register(payload) {\n    try {\n        const res = await axios.post(`/user`, payload, config)\n\n        return res.data\n    } catch (error) {\n        console.log(\"Error.\")\n    }\n}\n\nexport async function getLoggedIn() {\n    try {\n        const res = await axios.get(`/auth/loggedIn`)\n        return res.data\n    } catch (error) {\n        console.log(\"Error.\")\n    }\n}\n\nexport async function logout() {\n    try {\n        const res = await axios.get(`/auth/logout`)\n        return res.data\n    } catch (error) {\n        console.log(\"Error.\")\n    }\n}\n","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/Register/Register.js",["88"],"import React, { useState, useContext } from \"react\"\nimport { withRouter, Redirect, useHistory } from \"react-router\"\nimport { register } from \"../../api/auth\"\n\nimport \"./Register.css\"\nimport AuthContext from \"../../util/AuthContext\"\n\nfunction Register() {\n    const { isLoggedIn } = useContext(AuthContext)\n    const history = useHistory()\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [firstName, setFirstName] = useState(\"\")\n    const [lastName, setLastName] = useState(\"\")\n    const [username, setUsername] = useState(\"\")\n    const handleRegister = async (e) => {\n        e.preventDefault()\n        const registerPayload = {\n            email,\n            password,\n            firstName,\n            lastName,\n            username,\n        }\n        try {\n            await register(registerPayload)\n                .then((res) => {\n                    console.log(res)\n                })\n                .catch((err) => {})\n\n            await isLoggedIn()\n            history.push(\"/\")\n\n            setEmail(\"\")\n            setPassword(\"\")\n            setFirstName(\"\")\n            setLastName(\"\")\n            setUsername(\"\")\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n    return (\n        <div className=\"register_container\">\n            <h2\n                style={{\n                    textAlign: \"center\",\n                    margin: 0,\n                    marginTop: \"30px\",\n                }}\n            >\n                Chitter | Register\n            </h2>\n\n            <form className=\"register_form\" onSubmit={handleRegister}>\n                <input\n                    type=\"text\"\n                    onChange={(e) => setFirstName(e.target.value)}\n                    name=\"firstName\"\n                    placeholder=\"First Name\"\n                    value={firstName}\n                />\n                <input\n                    type=\"text\"\n                    onChange={(e) => setLastName(e.target.value)}\n                    name=\"lastName\"\n                    placeholder=\"Last Name\"\n                    value={lastName}\n                />\n                <input\n                    type=\"text\"\n                    onChange={(e) => setUsername(e.target.value)}\n                    name=\"username\"\n                    placeholder=\"@Username\"\n                    value={username}\n                />\n                <input\n                    type=\"email\"\n                    onChange={(e) => setEmail(e.target.value)}\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    value={email}\n                />\n\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    onChange={(e) => setPassword(e.target.value)}\n                    value={password}\n                    placeholder=\"Password\"\n                    required\n                />\n\n                <button className=\"btn_register\">Sign Up</button>\n            </form>\n            <p id=\"login_link\">\n                Already have an account? <a href=\"/login\">Sign in here</a>\n            </p>\n        </div>\n    )\n}\n\nexport default withRouter(Register)\n","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/util/AuthContext.js",["89"],"import React, { useState, useEffect, createContext } from \"react\"\nimport { getLoggedIn } from \"../api/auth\"\nimport { connect } from \"react-redux\"\n\nconst AuthContext = createContext()\n\nfunction AuthContextProvider(props) {\n    const [loggedIn, setLoggedIn] = useState(undefined)\n    const [currentUser, setCurrentUser] = useState({})\n\n    const isLoggedIn = async () => {\n        const res = await getLoggedIn()\n\n        console.log(res.isLoggedIn)\n\n        setLoggedIn(res.isLoggedIn)\n        setCurrentUser(res.currentUser)\n    }\n\n    useEffect(() => {\n        isLoggedIn()\n    }, [])\n    return (\n        <AuthContext.Provider value={{ loggedIn, currentUser, isLoggedIn }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}\n\nexport { AuthContextProvider }\nexport default AuthContext\n","/home/renz/Desktop/Projects/twitter-challenge-app/client/src/Router.js",[],"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/LogoutBtn/LogoutBtn.js",[],"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/api/tweet.js",["90"],"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/Navbar/Navbar.js",[],"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/components/TweetList/CommentForm.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":25},{"ruleId":"99","severity":1,"message":"100","line":21,"column":8,"nodeType":"101","endLine":21,"endColumn":10,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":5,"column":1,"nodeType":"105","endLine":15,"endColumn":2},{"ruleId":"95","severity":1,"message":"106","line":3,"column":7,"nodeType":"97","messageId":"98","endLine":3,"endColumn":12},{"ruleId":"99","severity":1,"message":"107","line":54,"column":8,"nodeType":"101","endLine":54,"endColumn":10,"suggestions":"108"},{"ruleId":"103","severity":1,"message":"104","line":3,"column":1,"nodeType":"105","endLine":28,"endColumn":2},{"ruleId":"95","severity":1,"message":"109","line":2,"column":7,"nodeType":"97","messageId":"98","endLine":2,"endColumn":10},{"ruleId":"95","severity":1,"message":"110","line":2,"column":22,"nodeType":"97","messageId":"98","endLine":2,"endColumn":30},{"ruleId":"95","severity":1,"message":"111","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":17},{"ruleId":"95","severity":1,"message":"109","line":2,"column":7,"nodeType":"97","messageId":"98","endLine":2,"endColumn":10},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["114"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'today' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchMoreData'. Either include it or remove the dependency array.",["115"],"'api' is assigned a value but never used.","'Redirect' is defined but never used.","'connect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [props]",{"range":"120","text":"121"},"Update the dependencies array to be: [fetchMoreData]",{"range":"122","text":"123"},[575,577],"[props]",[1731,1733],"[fetchMoreData]"]