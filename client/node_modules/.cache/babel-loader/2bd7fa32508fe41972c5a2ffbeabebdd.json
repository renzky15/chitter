{"ast":null,"code":"import { Tweet, allTweet, likeCounter } from \"../api/tweet\";\nconst today = new Date(); // export const addTweet = ({\n//     user_id = '',\n//     username = \"\",\n//     tweetBody = \"\",\n//     tweeted_date = today.toDateString(),\n//     comments = 0,\n//     retweets = 0,\n//     likes = 0,\n// } = {}) => ({\n//     type: \"ADD_TWEET\",\n//     tweet_payload: {\n//         user_id,\n//         username,\n//         tweetBody,\n//         tweeted_date,\n//         comments,\n//         retweets,\n//         likes,\n//     },\n// })\n\nexport const tweetActions = {\n  addTweet,\n  getAllTweet,\n  likeTweet\n};\n\nfunction addTweet(tweet_payload) {\n  return async dispatch => {\n    await Tweet(tweet_payload).then(res => {\n      dispatch(success(res.data));\n    }, error => {\n      console.log(error.message);\n    });\n  };\n\n  function success(tweet_payload) {\n    return {\n      type: \"ADD_TWEET\",\n      tweet_payload\n    };\n  }\n}\n\nfunction getAllTweet() {\n  return async dispatch => {\n    await allTweet().then(res => {\n      dispatch(success(res.data)); // console.log(res)\n    }, error => {\n      console.log(error.message);\n    });\n  };\n\n  function success(tweets_payload) {\n    return {\n      type: \"ALL_TWEET\",\n      tweets_payload\n    };\n  }\n}\n\nfunction likeTweet(payload) {\n  return async dispatch => {\n    await likeCounter(payload).then(res => {\n      dispatch(success(res.data)); // console.log(res)\n    }, error => {\n      console.log(error.message);\n    });\n  };\n\n  function success(tweets_payload) {\n    return {\n      type: \"LIKE_TWEET\",\n      tweets_payload\n    };\n  }\n}\n\nfunction removeTweet(payload) {\n  return async dispatch => {\n    await remove(payload).then(res => {\n      dispatch(success(res.data)); // console.log(res)\n    }, error => {\n      console.log(error.message);\n    });\n  };\n\n  function success(tweets_payload) {\n    return {\n      type: \"REMOVE_TWEET\",\n      tweets_payload\n    };\n  }\n}","map":{"version":3,"sources":["/home/renz/Desktop/Projects/twitter-challenge-app/client/src/action/tweet.js"],"names":["Tweet","allTweet","likeCounter","today","Date","tweetActions","addTweet","getAllTweet","likeTweet","tweet_payload","dispatch","then","res","success","data","error","console","log","message","type","tweets_payload","payload","removeTweet","remove"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,cAA7C;AAEA,MAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,QADwB;AAExBC,EAAAA,WAFwB;AAGxBC,EAAAA;AAHwB,CAArB;;AAKP,SAASF,QAAT,CAAkBG,aAAlB,EAAiC;AAC7B,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMV,KAAK,CAACS,aAAD,CAAL,CAAqBE,IAArB,CACDC,GAAD,IAAS;AACLF,MAAAA,QAAQ,CAACG,OAAO,CAACD,GAAG,CAACE,IAAL,CAAR,CAAR;AACH,KAHC,EAIDC,KAAD,IAAW;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACH,KANC,CAAN;AAQH,GATD;;AAWA,WAASL,OAAT,CAAiBJ,aAAjB,EAAgC;AAC5B,WAAO;AAAEU,MAAAA,IAAI,EAAE,WAAR;AAAqBV,MAAAA;AAArB,KAAP;AACH;AACJ;;AAED,SAASF,WAAT,GAAuB;AACnB,SAAO,MAAOG,QAAP,IAAoB;AACvB,UAAMT,QAAQ,GAAGU,IAAX,CACDC,GAAD,IAAS;AACLF,MAAAA,QAAQ,CAACG,OAAO,CAACD,GAAG,CAACE,IAAL,CAAR,CAAR,CADK,CAEL;AACH,KAJC,EAKDC,KAAD,IAAW;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACH,KAPC,CAAN;AASH,GAVD;;AAYA,WAASL,OAAT,CAAiBO,cAAjB,EAAiC;AAC7B,WAAO;AAAED,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA;AAArB,KAAP;AACH;AACJ;;AAED,SAASZ,SAAT,CAAmBa,OAAnB,EAA4B;AACxB,SAAO,MAAOX,QAAP,IAAoB;AACvB,UAAMR,WAAW,CAACmB,OAAD,CAAX,CAAqBV,IAArB,CACDC,GAAD,IAAS;AACLF,MAAAA,QAAQ,CAACG,OAAO,CAACD,GAAG,CAACE,IAAL,CAAR,CAAR,CADK,CAEL;AACH,KAJC,EAKDC,KAAD,IAAW;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACH,KAPC,CAAN;AASH,GAVD;;AAYA,WAASL,OAAT,CAAiBO,cAAjB,EAAiC;AAC7B,WAAO;AAAED,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA;AAAtB,KAAP;AACH;AACJ;;AAED,SAASE,WAAT,CAAqBD,OAArB,EAA8B;AAC1B,SAAO,MAAOX,QAAP,IAAoB;AACvB,UAAMa,MAAM,CAACF,OAAD,CAAN,CAAgBV,IAAhB,CACDC,GAAD,IAAS;AACLF,MAAAA,QAAQ,CAACG,OAAO,CAACD,GAAG,CAACE,IAAL,CAAR,CAAR,CADK,CAEL;AACH,KAJC,EAKDC,KAAD,IAAW;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACH,KAPC,CAAN;AASH,GAVD;;AAYA,WAASL,OAAT,CAAiBO,cAAjB,EAAiC;AAC7B,WAAO;AAAED,MAAAA,IAAI,EAAE,cAAR;AAAwBC,MAAAA;AAAxB,KAAP;AACH;AACJ","sourcesContent":["import { Tweet, allTweet, likeCounter } from \"../api/tweet\"\n\nconst today = new Date()\n// export const addTweet = ({\n//     user_id = '',\n//     username = \"\",\n//     tweetBody = \"\",\n//     tweeted_date = today.toDateString(),\n//     comments = 0,\n//     retweets = 0,\n//     likes = 0,\n// } = {}) => ({\n//     type: \"ADD_TWEET\",\n//     tweet_payload: {\n//         user_id,\n//         username,\n//         tweetBody,\n//         tweeted_date,\n//         comments,\n//         retweets,\n//         likes,\n//     },\n// })\n\nexport const tweetActions = {\n    addTweet,\n    getAllTweet,\n    likeTweet,\n}\nfunction addTweet(tweet_payload) {\n    return async (dispatch) => {\n        await Tweet(tweet_payload).then(\n            (res) => {\n                dispatch(success(res.data))\n            },\n            (error) => {\n                console.log(error.message)\n            }\n        )\n    }\n\n    function success(tweet_payload) {\n        return { type: \"ADD_TWEET\", tweet_payload }\n    }\n}\n\nfunction getAllTweet() {\n    return async (dispatch) => {\n        await allTweet().then(\n            (res) => {\n                dispatch(success(res.data))\n                // console.log(res)\n            },\n            (error) => {\n                console.log(error.message)\n            }\n        )\n    }\n\n    function success(tweets_payload) {\n        return { type: \"ALL_TWEET\", tweets_payload }\n    }\n}\n\nfunction likeTweet(payload) {\n    return async (dispatch) => {\n        await likeCounter(payload).then(\n            (res) => {\n                dispatch(success(res.data))\n                // console.log(res)\n            },\n            (error) => {\n                console.log(error.message)\n            }\n        )\n    }\n\n    function success(tweets_payload) {\n        return { type: \"LIKE_TWEET\", tweets_payload }\n    }\n}\n\nfunction removeTweet(payload) {\n    return async (dispatch) => {\n        await remove(payload).then(\n            (res) => {\n                dispatch(success(res.data))\n                // console.log(res)\n            },\n            (error) => {\n                console.log(error.message)\n            }\n        )\n    }\n\n    function success(tweets_payload) {\n        return { type: \"REMOVE_TWEET\", tweets_payload }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}