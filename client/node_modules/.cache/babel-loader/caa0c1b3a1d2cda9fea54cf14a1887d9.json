{"ast":null,"code":"var _jsxFileName = \"/home/renz/Desktop/Projects/twitter-challenge-app/client/src/util/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext } from \"react\";\nimport { getLoggedIn } from \"../api/auth\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\nfunction AuthContextProvider(props) {\n  _s();\n\n  const [loggedIn, setLoggedIn] = useState(undefined);\n  const [userData, setUserData] = useState({});\n\n  const isLoggedIn = async () => {\n    await getLoggedIn().then(res => setLoggedIn(res.isLoggedIn), setUserData(res.currentUser));\n  };\n\n  useEffect(() => {\n    isLoggedIn();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loggedIn,\n      isLoggedIn\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"Zro2ePYzio3VJxZNMH1wYaYkM1k=\");\n\n_c = AuthContextProvider;\nexport { AuthContextProvider };\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/renz/Desktop/Projects/twitter-challenge-app/client/src/util/AuthContext.js"],"names":["React","useState","useEffect","createContext","getLoggedIn","connect","AuthContext","AuthContextProvider","props","loggedIn","setLoggedIn","undefined","userData","setUserData","isLoggedIn","then","res","currentUser","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,WAAW,gBAAGH,aAAa,EAAjC;;AAEA,SAASI,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACU,SAAD,CAAxC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMa,UAAU,GAAG,YAAY;AAC3B,UAAMV,WAAW,GAAGW,IAAd,CACDC,GAAD,IAASN,WAAW,CAACM,GAAG,CAACF,UAAL,CADlB,EAEFD,WAAW,CAACG,GAAG,CAACC,WAAL,CAFT,CAAN;AAIH,GALD;;AAOAf,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,QAAF;AAAYK,MAAAA;AAAZ,KAA7B;AAAA,cACKN,KAAK,CAACU;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAnBQX,mB;;KAAAA,mB;AAqBT,SAASA,mBAAT;AACA,eAAeD,WAAf","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\"\nimport { getLoggedIn } from \"../api/auth\"\nimport { connect } from \"react-redux\"\n\nconst AuthContext = createContext()\n\nfunction AuthContextProvider(props) {\n    const [loggedIn, setLoggedIn] = useState(undefined)\n    const [userData, setUserData] = useState({})\n\n    const isLoggedIn = async () => {\n        await getLoggedIn().then(\n            (res) => setLoggedIn(res.isLoggedIn),\n            setUserData(res.currentUser)\n        )\n    }\n\n    useEffect(() => {\n        isLoggedIn()\n    }, [])\n    return (\n        <AuthContext.Provider value={{ loggedIn, isLoggedIn }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}\n\nexport { AuthContextProvider }\nexport default AuthContext\n"]},"metadata":{},"sourceType":"module"}